<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="voltaire" errors="0" failures="161" skipped="0" tests="167" time="64.805" timestamp="2023-10-09T16:27:21.716942" hostname="fv-az257-30"><testcase classname="tests.bundle.test_bundle" name="test_bundle_replace_op[only_priority_fee_bump]" time="0.086"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:81: in test_bundle_replace_op
    assert new_op.send().result
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_bundle_replace_op[only_max_fee_bump]" time="0.041"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:81: in test_bundle_replace_op
    assert new_op.send().result
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_bundle_replace_op[with_same_fee]" time="0.041"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:81: in test_bundle_replace_op
    assert new_op.send().result
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_bundle_replace_op[with_less_fee]" time="0.042"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:81: in test_bundle_replace_op
    assert new_op.send().result
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_bundle_replace_op[fee_bump_below_threshold]" time="0.039"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:81: in test_bundle_replace_op
    assert new_op.send().result
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_bundle_replace_op[fee_bump_at_threshold]" time="0.038"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:81: in test_bundle_replace_op
    assert new_op.send().result
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_bundle_replace_op[fee_bump_above_threshold]" time="0.039"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:81: in test_bundle_replace_op
    assert new_op.send().result
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_mempool_reputation_rules_all_entities[SREP-020-banned-entity-not-allowed-banned-sender]" time="0.418"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:148: in test_mempool_reputation_rules_all_entities
    set_reputation(
tests/utils.py:200: in set_reputation
    )
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_mempool_reputation_rules_all_entities[SREP-020-banned-entity-not-allowed-banned-paymaster]" time="0.242"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:154: in test_mempool_reputation_rules_all_entities
    set_reputation(
tests/utils.py:200: in set_reputation
    )
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_mempool_reputation_rules_all_entities[SREP-020-banned-entity-not-allowed-banned-factory]" time="0.234"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:160: in test_mempool_reputation_rules_all_entities
    set_reputation(
tests/utils.py:200: in set_reputation
    )
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_mempool_reputation_rules_all_entities[SREP-030-throttled-entity-allowed-a-little-throttled-sender]" time="0.231"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:148: in test_mempool_reputation_rules_all_entities
    set_reputation(
tests/utils.py:200: in set_reputation
    )
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_mempool_reputation_rules_all_entities[SREP-030-throttled-entity-allowed-a-little-throttled-paymaster]" time="0.276"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:154: in test_mempool_reputation_rules_all_entities
    set_reputation(
tests/utils.py:200: in set_reputation
    )
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_mempool_reputation_rules_all_entities[SREP-030-throttled-entity-allowed-a-little-throttled-factory]" time="0.240"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:160: in test_mempool_reputation_rules_all_entities
    set_reputation(
tests/utils.py:200: in set_reputation
    )
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_mempool_reputation_rules_all_entities[UREP-010 UREP-020-unstaked-entity-allowed-function-unstaked-sender]" time="0.250"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:148: in test_mempool_reputation_rules_all_entities
    set_reputation(
tests/utils.py:200: in set_reputation
    )
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_mempool_reputation_rules_all_entities[UREP-010 UREP-020-unstaked-entity-allowed-function-unstaked-paymaster]" time="0.234"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:154: in test_mempool_reputation_rules_all_entities
    set_reputation(
tests/utils.py:200: in set_reputation
    )
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_mempool_reputation_rules_all_entities[UREP-010 UREP-020-unstaked-entity-allowed-function-unstaked-factory]" time="0.232"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:160: in test_mempool_reputation_rules_all_entities
    set_reputation(
tests/utils.py:200: in set_reputation
    )
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_max_allowed_ops_unstaked_sender" time="0.071"><failure message="AssertionError: assert [] == [UserOperatio...gnature='0x')]&#10;  Right contains one more item: UserOperation(sender='0x388105079e84A52874B50617c2025817eBB51626', nonce='0x0', initCode='0x', callData='0xa9e966b7000...tionGas='0x493e0', maxFeePerGas='0xee6b2800', maxPriorityFeePerGas='0x3b9aca00', paymasterAndData='0x', signature='0x')&#10;  Full diff:&#10;    [&#10;  +  ,&#10;  -  UserOperation(sender='0x388105079e84A52874B50617c2025817eBB51626',&#10;  -                nonce='0x0',&#10;  -                initCode='0x',&#10;  -                callData='0xa9e966b70000000000000000000000000000000000000000000000000000000000000001',&#10;  -                callGasLimit='0x493e0',&#10;  -                verificationGasLimit='0xf4240',&#10;  -                preVerificationGas='0x493e0',&#10;  -                maxFeePerGas='0xee6b2800',&#10;  -                maxPriorityFeePerGas='0x3b9aca00',&#10;  -                paymasterAndData='0x',&#10;  -                signature='0x'),&#10;    ]">tests/bundle/test_bundle.py:248: in test_max_allowed_ops_unstaked_sender
    assert dump_mempool() == wallet_ops[: i + 1]
E   AssertionError: assert [] == [UserOperatio...gnature='0x')]
E     Right contains one more item: UserOperation(sender='0x388105079e84A52874B50617c2025817eBB51626', nonce='0x0', initCode='0x', callData='0xa9e966b7000...tionGas='0x493e0', maxFeePerGas='0xee6b2800', maxPriorityFeePerGas='0x3b9aca00', paymasterAndData='0x', signature='0x')
E     Full diff:
E       [
E     +  ,
E     -  UserOperation(sender='0x388105079e84A52874B50617c2025817eBB51626',
E     -                nonce='0x0',
E     -                initCode='0x',
E     -                callData='0xa9e966b70000000000000000000000000000000000000000000000000000000000000001',
E     -                callGasLimit='0x493e0',
E     -                verificationGasLimit='0xf4240',
E     -                preVerificationGas='0x493e0',
E     -                maxFeePerGas='0xee6b2800',
E     -                maxPriorityFeePerGas='0x3b9aca00',
E     -                paymasterAndData='0x',
E     -                signature='0x'),
E       ]</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_max_allowed_ops_staked_sender" time="0.105"><failure message="AssertionError: assert [] == [UserOperatio...gnature='0x')]&#10;  Right contains one more item: UserOperation(sender='0x87D6f03C016EAd6A161913F68AAe7Bd28f7BA24f', nonce='0x10000000000000000', initCode='0x', callDat...tionGas='0x493e0', maxFeePerGas='0xee6b2800', maxPriorityFeePerGas='0x3b9aca00', paymasterAndData='0x', signature='0x')&#10;  Full diff:&#10;    [&#10;  +  ,&#10;  -  UserOperation(sender='0x87D6f03C016EAd6A161913F68AAe7Bd28f7BA24f',&#10;  -                nonce='0x10000000000000000',&#10;  -                initCode='0x',&#10;  -                callData='0xa9e966b70000000000000000000000000000000000000000000000000000000000000001',&#10;  -                callGasLimit='0x493e0',&#10;  -                verificationGasLimit='0xf4240',&#10;  -                preVerificationGas='0x493e0',&#10;  -                maxFeePerGas='0xee6b2800',&#10;  -                maxPriorityFeePerGas='0x3b9aca00',&#10;  -                paymasterAndData='0x',&#10;  -                signature='0x'),&#10;    ]">tests/bundle/test_bundle.py:275: in test_max_allowed_ops_staked_sender
    assert dump_mempool() == wallet_ops[: i + 1]
E   AssertionError: assert [] == [UserOperatio...gnature='0x')]
E     Right contains one more item: UserOperation(sender='0x87D6f03C016EAd6A161913F68AAe7Bd28f7BA24f', nonce='0x10000000000000000', initCode='0x', callDat...tionGas='0x493e0', maxFeePerGas='0xee6b2800', maxPriorityFeePerGas='0x3b9aca00', paymasterAndData='0x', signature='0x')
E     Full diff:
E       [
E     +  ,
E     -  UserOperation(sender='0x87D6f03C016EAd6A161913F68AAe7Bd28f7BA24f',
E     -                nonce='0x10000000000000000',
E     -                initCode='0x',
E     -                callData='0xa9e966b70000000000000000000000000000000000000000000000000000000000000001',
E     -                callGasLimit='0x493e0',
E     -                verificationGasLimit='0xf4240',
E     -                preVerificationGas='0x493e0',
E     -                maxFeePerGas='0xee6b2800',
E     -                maxPriorityFeePerGas='0x3b9aca00',
E     -                paymasterAndData='0x',
E     -                signature='0x'),
E       ]</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_ban_user_op_access_other_ops_sender_in_bundle" time="0.237"><failure message="AssertionError: assert [] == [UserOperatio...gnature='0x')]&#10;  Right contains one more item: UserOperation(sender='0x3A33EdAeF8DA04f72Fd006d74CcA20dd1437C500', nonce='0x0', initCode='0x', callData='0x', callGasL...tionGas='0x493e0', maxFeePerGas='0xee6b2800', maxPriorityFeePerGas='0x3b9aca00', paymasterAndData='0x', signature='0x')&#10;  Full diff:&#10;    [&#10;  +  ,&#10;  -  UserOperation(sender='0x3A33EdAeF8DA04f72Fd006d74CcA20dd1437C500',&#10;  -                nonce='0x0',&#10;  -                initCode='0x',&#10;  -                callData='0x',&#10;  -                callGasLimit='0x493e0',&#10;  -                verificationGasLimit='0xf4240',&#10;  -                preVerificationGas='0x493e0',&#10;  -                maxFeePerGas='0xee6b2800',&#10;  -                maxPriorityFeePerGas='0x3b9aca00',&#10;  -                paymasterAndData='0x',&#10;  -                signature='0x'),&#10;    ]">tests/bundle/test_bundle.py:319: in test_ban_user_op_access_other_ops_sender_in_bundle
    assert dump_mempool() == [user_op2]
E   AssertionError: assert [] == [UserOperatio...gnature='0x')]
E     Right contains one more item: UserOperation(sender='0x3A33EdAeF8DA04f72Fd006d74CcA20dd1437C500', nonce='0x0', initCode='0x', callData='0x', callGasL...tionGas='0x493e0', maxFeePerGas='0xee6b2800', maxPriorityFeePerGas='0x3b9aca00', paymasterAndData='0x', signature='0x')
E     Full diff:
E       [
E     +  ,
E     -  UserOperation(sender='0x3A33EdAeF8DA04f72Fd006d74CcA20dd1437C500',
E     -                nonce='0x0',
E     -                initCode='0x',
E     -                callData='0x',
E     -                callGasLimit='0x493e0',
E     -                verificationGasLimit='0xf4240',
E     -                preVerificationGas='0x493e0',
E     -                maxFeePerGas='0xee6b2800',
E     -                maxPriorityFeePerGas='0x3b9aca00',
E     -                paymasterAndData='0x',
E     -                signature='0x'),
E       ]</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_ban_user_sender_double_role_in_bundle" time="0.183"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=66)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_bundle.py:358: in test_ban_user_sender_double_role_in_bundle
    assert_ok(response1)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=66)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_bundle" name="test_stake_check_in_bundler" time="0.066"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_bundle.py:382: in test_stake_check_in_bundler
    response = get_stake_status(paymaster_contract.address, entrypoint_contract.address)
tests/utils.py:165: in get_stake_status
    .result
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_codehash" name="test_codehash_changed" time="0.112"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/bundle/test_codehash.py:44: in test_codehash_changed
    assert response.result, "userop dropped by bundler"
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]unstaked][paymaster][no_storage][ok]" time="0.094"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=75)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=75)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-031]unstaked][paymaster][storage][drop]" time="0.094"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=77).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=77).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-032]unstaked][paymaster][reference_storage][drop]" time="0.094"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=79).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=79).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-032]unstaked][paymaster][reference_storage_struct][drop]" time="0.093"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=81).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=81).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-010]unstaked][paymaster][account_storage][ok]" time="0.108"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=83)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=83)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]unstaked][paymaster][account_reference_storage][ok]" time="0.099"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=85)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=85)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]unstaked][paymaster][account_reference_storage_struct][ok]" time="0.095"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=87)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=87)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-022]unstaked][paymaster][account_reference_storage_init_code][drop0]" time="0.204"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=89).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=89).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[EREP-050]unstaked][paymaster][context][drop]" time="0.208"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=91).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=91).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-032]unstaked][paymaster][external_storage][drop]" time="0.095"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=93).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=93).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]unstaked][paymaster][out_of_gas][drop]" time="0.094"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=95).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=95).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]unstaked][paymaster][sstore_out_of_gas][drop]" time="0.092"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=97).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=97).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]staked][paymaster][no_storage][ok]" time="0.130"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=99)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=99)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-031]staked][paymaster][storage][ok]" time="0.125"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=101)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=101)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-032]staked][paymaster][reference_storage][ok]" time="0.128"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=103)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=103)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-032]staked][paymaster][reference_storage_struct][ok]" time="0.128"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=105)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=105)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-010]staked][paymaster][account_storage][ok]" time="0.129"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=107)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=107)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]staked][paymaster][account_reference_storage][ok]" time="0.132"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=109)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=109)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]staked][paymaster][account_reference_storage_struct][ok]" time="0.133"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=111)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=111)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-022]staked][paymaster][account_reference_storage_init_code][ok]" time="0.348"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=113)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=113)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[EREP-050]staked][paymaster][context][ok]" time="0.133"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=115)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=115)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-031]staked][paymaster][external_storage][drop]" time="0.128"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=117).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=117).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]staked][paymaster][out_of_gas][drop]" time="0.133"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=119).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=119).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]staked][paymaster][sstore_out_of_gas][drop]" time="0.129"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=121).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=121).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]unstaked][factory][no_storage][ok]" time="0.151"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=123)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=123)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]unstaked][factory][storage][drop]" time="0.150"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=125).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=125).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]unstaked][factory][reference_storage][drop]" time="0.152"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=127).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=127).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-032]unstaked][factory][reference_storage_struct][drop]" time="0.148"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=129).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=129).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-010]unstaked][factory][account_storage][ok]" time="0.151"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=131)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=131)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]unstaked][factory][account_reference_storage][drop]" time="0.151"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=133).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=133).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]unstaked][factory][account_reference_storage_struct][drop]" time="0.157"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=135).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=135).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]unstaked][factory][external_storage][drop]" time="0.152"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=137).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=137).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-042]unstaked][factory][EXTCODEx_CALLx_undeployed_sender][ok]" time="0.152"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=139)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=139)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][factory][EXTCODESIZE_undeployed_contract][drop]" time="0.147"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=141).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=141).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][factory][EXTCODEHASH_undeployed_contract][drop]" time="0.156"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=143).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=143).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][factory][EXTCODECOPY_undeployed_contract][drop]" time="0.156"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=145).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=145).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][factory][CALL_undeployed_contract][drop]" time="0.172"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=147).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=147).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][factory][CALLCODE_undeployed_contract][drop]" time="0.153"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=149).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=149).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][factory][DELEGATECALL_undeployed_contract][drop]" time="0.153"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=151).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=151).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][factory][STATICCALL_undeployed_contract][drop]" time="0.153"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=153).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=153).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]unstaked][factory][out_of_gas][drop]" time="0.152"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=155).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=155).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]unstaked][factory][sstore_out_of_gas][drop]" time="0.154"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=157).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=157).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]staked][factory][no_storage][ok]" time="0.193"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=159)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=159)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-031]staked][factory][storage][ok]" time="0.216"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=161)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=161)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-032]staked][factory][reference_storage][ok]" time="0.188"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=163)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=163)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-032]staked][factory][reference_storage_struct][ok]" time="0.188"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=165)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=165)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-010]staked][factory][account_storage][ok]" time="0.184"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=167)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=167)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]staked][factory][account_reference_storage][ok]" time="0.183"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=169)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=169)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]staked][factory][account_reference_storage_struct][ok]" time="0.200"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=171)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=171)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]staked][factory][external_storage][drop]" time="0.198"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=173).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=173).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]staked][factory][out_of_gas][drop]" time="0.207"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=175).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=175).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]staked][factory][sstore_out_of_gas][drop]" time="0.185"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=177).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=177).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]unstaked][account][no_storage][ok]" time="0.158"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=179)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=179)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-010]unstaked][account][account_storage][ok]" time="0.090"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=181)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=181)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]unstaked][account][account_reference_storage][ok]" time="0.087"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=183)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=183)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-022]unstaked][account][account_reference_storage_init_code][drop]" time="0.193"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=185).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=185).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-022]unstaked][account][account_reference_storage_init_code][ok]" time="0.300"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=187)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=187)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-022]unstaked][paymaster][account_reference_storage_init_code][drop1]" time="0.240"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=189).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=189).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]unstaked][account][account_reference_storage_struct][ok]" time="0.087"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=191)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=191)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]unstaked][account][external_storage][drop]" time="0.090"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=193).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=193).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]unstaked][account][out_of_gas][drop]" time="0.090"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=195).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=195).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]unstaked][account][sstore_out_of_gas][drop]" time="0.096"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=197).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=197).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]staked][account][no_storage][ok]" time="0.124"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=199)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=199)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-010]staked][account][account_storage][ok]" time="0.126"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=201)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=201)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]staked][account][account_reference_storage][ok]" time="0.130"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=203)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=203)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-021]staked][account][account_reference_storage_struct][ok]" time="0.128"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=205)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=205)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]staked][account][out_of_gas][drop]" time="0.125"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=207).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=207).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-020]staked][account][sstore_out_of_gas][drop]" time="0.124"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=209).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=209).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[STO-000]staked][account][external_storage][drop]" time="0.124"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=211).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=211).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-011]unstaked][account][entryPoint_call_balanceOf][drop]" time="0.091"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=213).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=213).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-061]unstaked][account][eth_value_transfer_forbidden][drop]" time="0.139"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=215).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=215).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-053]unstaked][account][eth_value_transfer_entryPoint][ok]" time="0.093"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=217)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=217)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-052]unstaked][account][eth_value_transfer_entryPoint_depositTo][ok]" time="0.094"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=219)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=219)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][account][EXTCODESIZE_undeployed_contract][drop]" time="0.093"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=221).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=221).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][account][EXTCODEHASH_undeployed_contract][drop]" time="0.200"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=223).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=223).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][account][EXTCODECOPY_undeployed_contract][drop]" time="0.088"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=225).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=225).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-054]unstaked][account][EXTCODESIZE_entrypoint][drop]" time="0.089"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=227).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=227).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-054]unstaked][account][EXTCODEHASH_entrypoint][drop]" time="0.092"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=229).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=229).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-054]unstaked][account][EXTCODECOPY_entrypoint][drop]" time="0.089"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=231).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=231).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][account][CALL_undeployed_contract][drop]" time="0.090"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=233).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=233).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][account][CALLCODE_undeployed_contract][drop]" time="0.087"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=235).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=235).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][account][DELEGATECALL_undeployed_contract][drop]" time="0.090"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=237).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=237).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-041]unstaked][account][STATICCALL_undeployed_contract][drop]" time="0.095"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=239).code">tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/bundle/test_storage_rules.py:19: in assert_error
    assert_rpc_error(response, response.message, RPCErrorCode.BANNED_OPCODE)
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=239).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.bundle.test_storage_rules" name="test_rule[[OP-062]unstaked][account][CALL_undeployed_contract_allowed_precompile][ok]" time="0.090"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=241)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/bundle/test_storage_rules.py:737: in test_rule
    case.assert_func(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=241)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[GAS]" time="0.064"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=242).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=242).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[NUMBER]" time="0.063"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=243).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=243).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[TIMESTAMP]" time="0.069"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=244).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=244).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[COINBASE]" time="0.108"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=245).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=245).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[DIFFICULTY]" time="0.061"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=246).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=246).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[BASEFEE]" time="0.062"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=247).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=247).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[GASLIMIT]" time="0.064"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=248).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=248).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[GASPRICE]" time="0.070"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=249).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=249).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[SELFBALANCE]" time="0.064"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=250).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=250).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[BALANCE]" time="0.063"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=251).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=251).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[ORIGIN]" time="0.063"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=252).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=252).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[BLOCKHASH]" time="0.061"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=253).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=253).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[CREATE]" time="0.061"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=254).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=254).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[CREATE2]" time="0.069"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=255).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=255).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_banned_opcode[SELFDESTRUCT]" time="0.063"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=256).code">tests/opbanning/test_op_banning.py:46: in test_account_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=256).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_allowed_opcode_sequence[GAS CALL]" time="0.063"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=257)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/opbanning/test_op_banning.py:58: in test_account_allowed_opcode_sequence
    assert_ok(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=257)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_account_allowed_opcode_sequence[GAS DELEGATECALL]" time="0.063"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=258)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/opbanning/test_op_banning.py:58: in test_account_allowed_opcode_sequence
    assert_ok(response)
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=258)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[GAS]" time="0.090"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=259).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=259).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[NUMBER]" time="0.091"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=260).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=260).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[TIMESTAMP]" time="0.092"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=261).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=261).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[COINBASE]" time="0.091"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=262).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=262).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[DIFFICULTY]" time="0.094"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=263).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=263).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[BASEFEE]" time="0.094"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=264).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=264).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[GASLIMIT]" time="0.099"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=265).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=265).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[GASPRICE]" time="0.095"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=266).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=266).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[SELFBALANCE]" time="0.090"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=267).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=267).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[BALANCE]" time="0.090"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=268).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=268).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[ORIGIN]" time="0.088"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=269).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=269).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[BLOCKHASH]" time="0.089"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=270).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=270).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[CREATE]" time="0.090"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=271).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=271).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[CREATE2]" time="0.092"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=272).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=272).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_paymaster_banned_opcode[SELFDESTRUCT]" time="0.089"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=273).code">tests/opbanning/test_op_banning.py:67: in test_paymaster_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=273).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[GAS]" time="0.162"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=274).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=274).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[NUMBER]" time="0.149"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=275).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=275).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[TIMESTAMP]" time="0.143"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=276).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=276).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[COINBASE]" time="0.142"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=277).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=277).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[DIFFICULTY]" time="0.149"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=278).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=278).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[BASEFEE]" time="0.144"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=279).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=279).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[GASLIMIT]" time="0.144"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=280).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=280).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[GASPRICE]" time="0.144"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=281).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=281).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[SELFBALANCE]" time="0.150"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=282).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=282).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[BALANCE]" time="0.141"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=283).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=283).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[ORIGIN]" time="0.148"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=284).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=284).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[BLOCKHASH]" time="0.142"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=285).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=285).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[CREATE]" time="0.250"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=286).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=286).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[CREATE2]" time="0.144"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=287).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=287).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.opbanning.test_op_banning" name="test_factory_banned_opcode[SELFDESTRUCT]" time="0.146"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=288).code">tests/opbanning/test_op_banning.py:84: in test_factory_banned_opcode
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.BANNED_OPCODE: -32502&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=288).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.reputation.test_reputation" name="test_staked_entity_reputation_threshold[with_factory]" time="41.830"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=293)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/reputation/test_reputation.py:124: in test_staked_entity_reputation_threshold
    assert_ok(userop.send())
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=293)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.reputation.test_reputation" name="test_staked_entity_reputation_threshold[without_factory]" time="0.229"><failure message="Exception: expected result object, got:&#10;Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=298)">tests/utils.py:108: in assert_ok
    assert response.result
E   AttributeError: 'Error' object has no attribute 'result'

The above exception was the direct cause of the following exception:
tests/reputation/test_reputation.py:124: in test_staked_entity_reputation_threshold
    assert_ok(userop.send())
tests/utils.py:110: in assert_ok
    raise Exception(f"expected result object, got:\n{response}") from exc
E   Exception: expected result object, got:
E   Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=298)</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.rpc.test_eth_chainId" name="test_eth_chainId[]" time="0.012" /><testcase classname="tests.rpc.test_eth_estimateUserOperationGas" name="test_eth_estimateUserOperationGas[]" time="0.056"><failure message="jsonschema.exceptions.ValidationError: 'verificationGasLimit' is a required property&#10;&#10;Failed validating 'required' in schema:&#10;    {'properties': {'callGasLimit': {'oneOf': [{'pattern': '^0x([1-9a-f]+[0-9a-f]*|0)$',&#10;                                                'type': 'string'},&#10;                                               {'type': 'number'}],&#10;                                     'title': 'callGasLimit'},&#10;                    'preVerificationGas': {'oneOf': [{'pattern': '^0x([1-9a-f]+[0-9a-f]*|0)$',&#10;                                                      'type': 'string'},&#10;                                                     {'type': 'number'}],&#10;                                           'title': 'preVerificationGas'},&#10;                    'verificationGasLimit': {'oneOf': [{'pattern': '^0x([1-9a-f]+[0-9a-f]*|0)$',&#10;                                                        'type': 'string'},&#10;                                                       {'type': 'number'}],&#10;                                             'title': 'verificationGasLimit'}},&#10;     'required': ['callGasLimit',&#10;                  'preVerificationGas',&#10;                  'verificationGasLimit'],&#10;     'title': 'UserOperation Gas parameters',&#10;     'type': 'object'}&#10;&#10;On instance:&#10;    {'callGasLimit': '0xab10',&#10;     'deadline': 281474976710655,&#10;     'preVerificationGas': 48220,&#10;     'verificationGas': 334329}">tests/rpc/test_eth_estimateUserOperationGas.py:20: in test_eth_estimateUserOperationGas
    validate(instance=response.result, schema=schema)
.venv/lib/python3.10/site-packages/jsonschema/validators.py:1121: in validate
    raise error
E   jsonschema.exceptions.ValidationError: 'verificationGasLimit' is a required property
E   
E   Failed validating 'required' in schema:
E       {'properties': {'callGasLimit': {'oneOf': [{'pattern': '^0x([1-9a-f]+[0-9a-f]*|0)$',
E                                                   'type': 'string'},
E                                                  {'type': 'number'}],
E                                        'title': 'callGasLimit'},
E                       'preVerificationGas': {'oneOf': [{'pattern': '^0x([1-9a-f]+[0-9a-f]*|0)$',
E                                                         'type': 'string'},
E                                                        {'type': 'number'}],
E                                              'title': 'preVerificationGas'},
E                       'verificationGasLimit': {'oneOf': [{'pattern': '^0x([1-9a-f]+[0-9a-f]*|0)$',
E                                                           'type': 'string'},
E                                                          {'type': 'number'}],
E                                                'title': 'verificationGasLimit'}},
E        'required': ['callGasLimit',
E                     'preVerificationGas',
E                     'verificationGasLimit'],
E        'title': 'UserOperation Gas parameters',
E        'type': 'object'}
E   
E   On instance:
E       {'callGasLimit': '0xab10',
E        'deadline': 281474976710655,
E        'preVerificationGas': 48220,
E        'verificationGas': 334329}</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.rpc.test_eth_estimateUserOperationGas" name="test_eth_estimateUserOperationGas_execution_revert" time="0.041" /><testcase classname="tests.rpc.test_eth_estimateUserOperationGas" name="test_eth_estimateUserOperationGas_simulation_revert" time="0.042" /><testcase classname="tests.rpc.test_eth_getUserOperationByHash" name="test_eth_getUserOperationByHash[]" time="0.068"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/rpc/test_eth_getUserOperationByHash.py:16: in test_eth_getUserOperationByHash
    ) == userop_hash(helper_contract, userop), "user operation mismatch"
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.rpc.test_eth_getUserOperationByHash" name="test_eth_getUserOperationByHash_error" time="0.004" /><testcase classname="tests.rpc.test_eth_getUserOperationReceipt" name="test_eth_getUserOperationReceipt[]" time="0.067"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/rpc/test_eth_getUserOperationReceipt.py:15: in test_eth_getUserOperationReceipt
    assert response.result["userOpHash"] == userop_hash(helper_contract, userop)
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.rpc.test_eth_getUserOperationReceipt" name="test_eth_getUserOperationReceipt_error" time="0.004" /><testcase classname="tests.rpc.test_eth_sendUserOperation" name="test_eth_sendUserOperation[]" time="0.053"><failure message="AttributeError: 'Error' object has no attribute 'result'">tests/rpc/test_eth_sendUserOperation.py:19: in test_eth_sendUserOperation
    assert response.result == userop_hash(helper_contract, userop)
E   AttributeError: 'Error' object has no attribute 'result'</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.rpc.test_eth_sendUserOperation" name="test_eth_sendUserOperation_revert" time="0.049"><failure message="AssertionError: assert 'testwallet: dead signature' in 'max priority fee per gas is too low. it should be minimum : 3000000000'&#10; +  where 'testwallet: dead signature' = &lt;built-in method lower of str object at 0x7fbe30b48c10&gt;()&#10; +    where &lt;built-in method lower of str object at 0x7fbe30b48c10&gt; = 'testWallet: dead signature'.lower&#10; +  and   'max priority fee per gas is too low. it should be minimum : 3000000000' = &lt;built-in method lower of str object at 0x7fbe300f9e30&gt;()&#10; +    where &lt;built-in method lower of str object at 0x7fbe300f9e30&gt; = 'Max priority fee per gas is too low. it should be minimum : 3000000000'.lower&#10; +      where 'Max priority fee per gas is too low. it should be minimum : 3000000000' = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=313).message">tests/rpc/test_eth_sendUserOperation.py:32: in test_eth_sendUserOperation_revert
    assert_rpc_error(
tests/utils.py:116: in assert_rpc_error
    assert message.lower() in response.message.lower()
E   AssertionError: assert 'testwallet: dead signature' in 'max priority fee per gas is too low. it should be minimum : 3000000000'
E    +  where 'testwallet: dead signature' = &lt;built-in method lower of str object at 0x7fbe30b48c10&gt;()
E    +    where &lt;built-in method lower of str object at 0x7fbe30b48c10&gt; = 'testWallet: dead signature'.lower
E    +  and   'max priority fee per gas is too low. it should be minimum : 3000000000' = &lt;built-in method lower of str object at 0x7fbe300f9e30&gt;()
E    +    where &lt;built-in method lower of str object at 0x7fbe300f9e30&gt; = 'Max priority fee per gas is too low. it should be minimum : 3000000000'.lower
E    +      where 'Max priority fee per gas is too low. it should be minimum : 3000000000' = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=313).message</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.rpc.test_eth_sendUserOperation" name="test_eth_sendUserOperation_invalid_signature" time="0.039"><failure message="AssertionError: assert -32500 == &lt;RPCErrorCode.INVALID_SIGNATURE: -32507&gt;&#10; +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=315).code">tests/rpc/test_eth_sendUserOperation.py:38: in test_eth_sendUserOperation_invalid_signature
    assert_rpc_error(
tests/utils.py:115: in assert_rpc_error
    assert response.code == code
E   AssertionError: assert -32500 == &lt;RPCErrorCode.INVALID_SIGNATURE: -32507&gt;
E    +  where -32500 = Error(code=-32500, message='Max priority fee per gas is too low. it should be minimum : 3000000000', data=None, id=315).code</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.rpc.test_eth_supportedEntryPoints" name="test_eth_supportedEntryPoints[]" time="0.019" /></testsuite></testsuites>